generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mongodb"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator nestgraphql {
  provider = "node node_modules/prisma-nestjs-graphql"
  output   = "../src/@generated"
}

model Anime {
  id              String               @id @default(uuid()) @map("_id")
  slug            String               @unique
  malId           Int                  @unique
  anilistId       Int?                 @unique
  animeXId        String?              @unique
  animeBlkomId    String?              @unique
  //-------------------------------------//
  banner          String?
  cover           AnimeCoverImage
  altCovers       AnimeCoverImage[]
  title           AnimeTitle
  format          AnimeFormat          @default(TV)
  status          AnimeStatus          @default(RELEASING)
  description     AnimeDescription
  startDate       FuzzyDate
  endDate         FuzzyDate
  season          AnimeSeason
  episodesCount   Int
  duration        Int
  countryOfOrigin String
  isLicensed      Boolean
  isAdult         Boolean
  source          AnimeSource
  trailer         AnimeTrailer
  score           AnimeScoreProviders
  openings        String[]
  endings         String[]
  genres          Genre[]              @relation(references: [id], fields: [genreIDs])
  producers       Studio[]             @relation("producedAnimes", references: [id], fields: [producerIDs])
  studios         Studio[]             @relation("animatedAnimes", references: [id], fields: [studioIDs])
  characters      CharactersOnAnimes[] @relation()
  related         AnimeRelationType
  episodes        Episode[]
  broadcast       AnimeBroadcast
  updatedAt       DateTime             @updatedAt
  createdAt       DateTime             @default(now())
  producerIDs     String[]
  studioIDs       String[]
  genreIDs        String[]
}

type AnimeBroadcast {
  day      AnimeBroadcastDays
  time     String
  timezone String
  string   String
}

enum AnimeBroadcastDays {
  MONDAYS
  TUESDAYS
  WEDNESDAYS
  THURSDAYS
  FRIDAYS
  SATURDAYS
  SUNDAYS
}

model Episode {
  id        String          @id @default(uuid()) @map("_id")
  anime     Anime           @relation(references: [id], fields: [animeId])
  number    Int
  name      String
  servers   Server[]
  source    AnimeSources    @default(ANIME_X)
  filler    Boolean         @default(false)
  last      Boolean         @default(false)
  language  EpisodeLanguage @default(AR)
  updatedAt DateTime        @updatedAt
  createdAt DateTime        @default(now())
  animeId   String
}

enum EpisodeLanguage {
  AR
  EN
}

enum AnimeSources {
  ANIME_X
  ANIME_BLKOM
  XS_ANIME
  ANIME_SLAYER
}

type Server {
  id           String        @default(uuid()) @map("_id")
  name         String
  translatedBy String
  quality      ServerQuality @default(FHD)
  url          String
}

enum ServerQuality {
  FHD
  HD
  SD
  LD
}

type AnimeRelationType {
  malId     Int
  anilistId Int?
  type      AnimeRelation
}

type AnimeScoreProviders {
  mal     AnimeScoreProvider
  anilist AnimeScoreProvider
}

type AnimeScoreProvider {
  score    Float
  scoredBy Int
}

type AnimeCoverImage {
  raw   String
  color String?
}

type AnimeTitle {
  romaji   String
  english  String?
  native   String?
  synonyms String[]
}

type AnimeDescription {
  ar String?
  en String?
}

type AnimeTrailer {
  url       String?
  thumbnail String?
}

enum AnimeRelation {
  ADAPTATION
  PREQUEL
  SEQUEL
  PARENT
  SIDE_STORY
  CHARACTER
  SUMMARY
  ALTERNATIVE
  SPIN_OFF
  OTHER
  SOURCE
  COMPILATION
  CONTAINS
}

enum AnimeStatus {
  RELEASING
  NOT_YET_RELEASED
  FINISHED
  CANCELLED
  HIATUS
}

enum AnimeSeason {
  WINTER
  SPRING
  SUMMER
  FALL
}

enum AnimeFormat {
  TV
  TV_SHORT
  MOVIE
  SPECIAL
  OVA
  ONA
  MUSIC
  MANGA
  NOVEL
  ONE_SHOT
}

enum AnimeSource {
  ORIGINAL
  MANGA
  LIGHT_NOVEL
  VISUAL_NOVEL
  VIDEO_GAME
  OTHER
  NOVEL
  DOUJINSHI
  ANIME
  WEB_NOVEL
  LIVE_ACTION
  GAME
  COMIC
  MULTIMEDIA_PROJECT
  PICTURE_BOOK
}

model Studio {
  id               String   @id @default(uuid()) @map("_id")
  malId            Int      @unique
  name             String   @unique
  animatedAnimes   Anime[]  @relation("animatedAnimes", references: [id], fields: [animatedAnimeIDs])
  producedAnimes   Anime[]  @relation("producedAnimes", references: [id], fields: [animatedAnimeIDs])
  animatedAnimeIDs String[]
  producedAnimeIDs String[]
}

model Genre {
  id       String    @id @default(uuid()) @map("_id")
  malId    Int       @unique
  name     String
  type     GenreType @default(GENRE)
  animes   Anime[]   @relation(references: [id], fields: [animeIDs])
  animeIDs String[]
}

model Staff {
  id          String               @id @default(uuid()) @map("_id")
  malId       Int?                 @unique
  anilistId   Int?                 @unique
  language    String
  image       StaffImage
  name        StaffName
  age         Int?
  gender      String?
  yearsActive Int[]
  homeTown    String[]
  bloodType   String
  dateOfBirth FuzzyDate
  dateOfDeath FuzzyDate
  animes      CharactersOnAnimes[] @relation()
}

type StaffName {
  first       String?
  middle      String?
  last        String?
  full        String?
  native      String?
  alternative String[]
}

type StaffImage {
  raw String
}

model Character {
  id          String               @id @default(uuid()) @map("_id")
  malId       Int?                 @unique
  anilistId   Int?                 @unique
  name        CharacterName
  image       CharacterImage
  description String?
  age         String?
  gender      String?
  bloodType   String?
  dateOfBirth FuzzyDate
  animes      CharactersOnAnimes[] @relation()
}

model CharactersOnAnimes {
  id          String        @id @default(uuid()) @map("_id")
  role        CharacterRole @default(MAIN)
  character   Character     @relation(references: [id], fields: [characterId])
  staff       Staff         @relation(references: [id], fields: [staffId])
  anime       Anime         @relation(references: [id], fields: [animeId])
  characterId String
  staffId     String
  animeId     String
}

type CharacterImage {
  raw String
}

type CharacterName {
  first              String?
  middle             String?
  last               String?
  full               String?
  native             String?
  alternative        String[]
  alternativeSpoiler String[]
}

enum CharacterRole {
  MAIN
  SUPPORTING
  BACKGROUND
}

enum GenreType {
  GENRE
  EXPLICIT_GENRE
  THEME
  DEMOGRAPHIC
}

enum Sources {
  ANIMEX
  ANIMEIFY
  XSANIME
  ANIMESLAYER
}

type FuzzyDate {
  year  Int?
  month Int?
  day   Int?
}
